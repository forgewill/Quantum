class HomeController < ApplicationController
  before_filter :authenticate_user!

  def index
    @index = {}

    # Artificial Neural Network
    net = Ai4r::NeuralNetwork::Backpropagation.new([3, 1, 1])
    example = [
    [0.634425086,	0.600820945,	0.649504287],
    [0.99679235,	0.524212789,	0.527324212],
    [0.180129746,	0.134914755,	0.886880672],
    [0.80412013,	0.139920589,	0.075903924],
    [0.399602684,	0.320799323,	0.308399377],
    [0.179365616,	0.504556824,	0.219159889],
    [0.705140821,	0.796230853,	0.74452538],
    [0.73693024,	0.198949846,	0.600344846],
    [0.705325372,	0.573084057,	0.992485195],
    [0.769413965,	0.711813445,	0.503595374],
    [0.503692656,	0.875603655,	0.557801003],
    [0.297227361,	0.778281978,	0.904957887],
    [0.436205225,	0.238800184,	0.866753475],
    [0.893093963,	0.194555082,	0.8022721],
    [0.252110757,	0.604395966,	0.629943907],
    [0.516946432,	0.437173073,	0.007380875],
    [0.88139331,	0.408007434,	0.003297754],
    [0.879555888,	0.18443629,	  0.314398531],
    [0.842711582,	0.574238844,	0.983969112],
    [0.415009506,	0.364538837,	0.119788504],
    [0.377065207,	0.864152584,	0.324752884],
    [0.871526427,	0.017335375,	0.60614262],
    [0.001825254,	0.003950343,	0.388481514],
    [0.347631106,	0.048873197,	0.750016011],
    [0.446373497,	0.236314595,	0.066605224],
    [0.70802747,	0.571790163, 	0.864284953],
    [0.766354527,	0.627432837,	0.153156396],
    [0.982666343,	0.885696035,	0.463056567],
    [0.515978939,	0.414517256,	0.202464172],
    [0.063125901,	0.59806859, 	0.580997765],
    [0.419253079,	0.772607585,	0.889303824],
    [0.871283465,	0.47447001, 	0.403477613],
    [0.651287882,	0.169308439,	0.286194307],
    [0.859073997,	0.325198458,	0.489775583],
    [0.569638313,	0.034358814,	0.396761998],
    [0.161406206,	0.676058536,	0.351881743],
    [0.729729234,	0.768165748,	0.531911667],
    [0.978356635,	0.724747372,	0.770006888],
    [0.208044812,	0.528829874,	0.745131094],
    [0.918162813,	0.277134621,	0.139049705],
    [0.277393065,	0.336949039,	0.985425899],
    [0.145279647,	0.686961751,	0.602495064],
    [0.914455128,	0.564881404,	0.512077942],
    [0.046053538,	0.302222888,	0.774838578],
    [0.775867006,	0.2823406,	  0.18743124],
    [0.066834054,	0.126664704,	0.783809503],
    [0.954115932,	0.85496059, 	0.919764123],
    [0.678731531,	0.999460339,	0.422763556],
    [0.090291121,	0.343205264,	0.778843261],
    [0.148529363,	0.846582211,	0.838733122]
    ]

    result = [
    [0.618032401],
    [0.595877579],
    [0.329688483],
    [0.223546354],
    [0.329519841],
    [0.384428909],
    [0.76964098],
    [0.379995655],
    [0.697770539],
    [0.668399005],
    [0.740366342],
    [0.737792763],
    [0.425399263],
    [0.451265168],
    [0.55794017],
    [0.341691027],
    [0.377837896],
    [0.32119479],
    [0.716942322],
    [0.310921854],
    [0.656239552],
    [0.292665844],
    [0.099764372],
    [0.268972587],
    [0.225396088],
    [0.665349456],
    [0.52970198],
    [0.794581714],
    [0.376723238],
    [0.51355948],
    [0.748778469],
    [0.516243929],
    [0.270826822],
    [0.44642407],
    [0.205251535],
    [0.517816488],
    [0.703336751],
    [0.77410364],
    [0.53478742],
    [0.338767621],
    [0.490134858],
    [0.584592764],
    [0.604116597],
    [0.381951408],
    [0.332642221],
    [0.281976306],
    [0.886034774],
    [0.807176822],
    [0.414177642],
    [0.739912012]
    ]

    #Params of net
    net.set_parameters(
    #    :disable_bias => true,
        :momentum => 0.15,
        :learning_rate => 0.5,
        :propagation_function => lambda { |x| Math.tanh(x) },
        :derivative_propagation_function => lambda { |y| 1.0 - y**2 }
    )
    #Train the network
    40000.times do |i|
      j = i % result.length
      net.train(example[j], result[j])
    end


    @index[:net] = net
    @index[:eval] = net.eval([0.5, 0.25, 0.3])

    ####################################################################################################################

    # Statistical

    #@first = Statsample::Shorthand.rnorm(1000.0.10)
    @first = 1000.times.collect {rand}.to_scale
    @second = 1000.times.collect {rand}.to_scale

    array = []
    #@first.each_with_index do |x.i|
    #  array[i] = @first[i] > 2 && @first[i] || @first[i]+20
    #end

    #@second = array.to_scale

    @index[:first_a] = @first[0]
    @index[:first_b] = @second[0]

  end

end
